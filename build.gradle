buildscript {
    ext {
        gradleVersionProperty = '7.5'
        testNGVersion = '7.6.1'
        seleniumVersion = '4.3.0'
        webdriverManagerVersion = '5.2.1'
        assertJVersion = '3.23.1'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'eclipse'
}

group 'com.anandbagmar'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.testng:testng:' + testNGVersion
    implementation 'org.seleniumhq.selenium:selenium-java:' + seleniumVersion
    implementation 'io.github.bonigarcia:webdrivermanager:' + webdriverManagerVersion
    implementation 'org.assertj:assertj-core:' + assertJVersion
}

project.ext.logDir = "${rootDir}/reports"

test {
    useTestNG() {
        options {
            parallel = 'methods'
            threadCount = 2
        }
        reports.html.required = true
        reports.html.destination(file("${project.logDir}/html"))

        reports.junitXml.required = true
        reports.junitXml.destination(file("${project.logDir}/junit"))
        testLogging {
            events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
            // show standard out and standard error of the test JVM(s) on the console
            showStandardStreams = true
            // show full exception trace
            exceptionFormat = 'full'
            showStackTraces = true
            showCauses = true
            showExceptions = true
        }

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

clean.doFirst {
    delete "${rootDir}/target"
    delete "${rootDir}/bin"
    delete "${rootDir}/build"
    delete "${rootDir}/out"
    delete "${rootDir}/reports"
    delete "${rootDir}/null"
    println "Clean: Deleted bin, build, out, target and reports directories"
}

clean.doLast {
    mkdir "${rootDir}/reports"
    println "Created reports directory"
}

wrapper {
    gradleVersion = gradleVersionProperty
}