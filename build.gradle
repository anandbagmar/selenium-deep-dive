buildscript {
    ext {
        gradleVersionProperty = '6.5'
        masterThoughtVersion = '5.+'
        testNGVersion = '6+'
        seleniumVersion = '3+'
        webdriverManagerVersion = '3.+'
        jsonSimpleVersion = '1.+'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'eclipse'
}

group 'com.anandbagmar'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

sourceSets {
    main {
        java {
            srcDir file('src/main/java')
        }
        resources {
            srcDirs ("resources")
        }
    }
    test {
        java {
            srcDir file('src/test/java')
        }
        resources {
            srcDir file('resources')
        }
    }
}

dependencies {
    implementation 'org.testng:testng:' + testNGVersion
    implementation 'org.seleniumhq.selenium:selenium-java:' + seleniumVersion
    implementation 'net.masterthought:cucumber-reporting:' + masterThoughtVersion
    implementation 'io.github.bonigarcia:webdrivermanager:' + webdriverManagerVersion
    implementation 'com.googlecode.json-simple:json-simple:' + jsonSimpleVersion
}

project.ext.logDir = "${rootDir}/reports"

test {
    useTestNG() {
        options {
            parallel = 'methods'
            threadCount = 2
        }
        reports.html.enabled = true
        reports.html.setDestination(file("${project.logDir}/html"))

        reports.junitXml.enabled = true
        reports.junitXml.setDestination(file("${project.logDir}/junit"))
        testLogging {
            events "started", "passed", "skipped", "failed"
            // show standard out and standard error of the test JVM(s) on the console
            showStandardStreams = true
            // show full exception trace
            exceptionFormat = 'full'
            showStackTraces = true
            showCauses = true
            showExceptions = true
        }
    }
}

clean.doFirst {
    delete "${rootDir}/target"
    delete "${rootDir}/bin"
    delete "${rootDir}/build"
    delete "${rootDir}/out"
    delete "${rootDir}/reports"
    println "Clean: Deleted bin, build, out, target and reports directories"
}

clean.doLast {
    mkdir "${rootDir}/reports"
    println "Created reports directory"
}

test.dependsOn clean

wrapper {
    gradleVersion = gradleVersionProperty
}